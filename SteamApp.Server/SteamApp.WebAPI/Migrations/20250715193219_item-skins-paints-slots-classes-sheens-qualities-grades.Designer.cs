// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SteamApp.WebAPI.Context;

#nullable disable

namespace SteamApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250715193219_item-skins-paints-slots-classes-sheens-qualities-grades")]
    partial class itemskinspaintsslotsclassessheensqualitiesgrades
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SteamApp.Models.Entities.Class", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("class");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Grade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("grade");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ClassId")
                        .HasColumnType("bigint")
                        .HasColumnName("class_id");

                    b.Property<int?>("CurrentStock")
                        .HasColumnType("int")
                        .HasColumnName("current_stock");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsWeapon")
                        .HasColumnType("bit")
                        .HasColumnName("is_weapon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<short?>("Rating")
                        .HasColumnType("smallint")
                        .HasColumnName("rating");

                    b.Property<long?>("SlotId")
                        .HasColumnType("bigint")
                        .HasColumnName("slot_id");

                    b.Property<int?>("TradesCount")
                        .HasColumnType("int")
                        .HasColumnName("trades_count");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SlotId");

                    b.ToTable("item");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.ItemSkins", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("GradeId")
                        .HasColumnType("bigint")
                        .HasColumnName("grade_id");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<long>("SkinId")
                        .HasColumnType("bigint")
                        .HasColumnName("skin_id");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("ItemId");

                    b.HasIndex("SkinId");

                    b.ToTable("ItemSkins");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Paint", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<byte>("B")
                        .HasColumnType("tinyint")
                        .HasColumnName("b_value");

                    b.Property<byte>("G")
                        .HasColumnType("tinyint")
                        .HasColumnName("g_value");

                    b.Property<bool>("IsGoodPaint")
                        .HasColumnType("bit")
                        .HasColumnName("is_good_paint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<byte>("R")
                        .HasColumnType("tinyint")
                        .HasColumnName("r_value");

                    b.HasKey("Id");

                    b.ToTable("paint");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("cost_price");

                    b.Property<DateTime>("DateBought")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_bought");

                    b.Property<DateTime?>("DateSold")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_sold");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("desciption");

                    b.Property<bool>("IsHat")
                        .HasColumnType("bit")
                        .HasColumnName("is_hat");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit")
                        .HasColumnName("is_sold");

                    b.Property<bool?>("IsStrange")
                        .HasColumnType("bit")
                        .HasColumnName("is_strange");

                    b.Property<bool>("IsWeapon")
                        .HasColumnType("bit")
                        .HasColumnName("is_weapon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<short?>("PaintId")
                        .HasColumnType("smallint")
                        .HasColumnName("paint_id");

                    b.Property<short?>("QualityId")
                        .HasColumnType("smallint")
                        .HasColumnName("quality_id");

                    b.Property<short?>("SheenId")
                        .HasColumnType("smallint")
                        .HasColumnName("sheen_id");

                    b.Property<decimal?>("SoldPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("sold_price");

                    b.Property<decimal?>("TargetSellPrice1")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("t_sell_price_1");

                    b.Property<decimal?>("TargetSellPrice2")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("t_sell_price_2");

                    b.Property<decimal?>("TargetSellPrice3")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("t_sell_price_3");

                    b.Property<decimal?>("TargetSellPrice4")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("t_sell_price_4");

                    b.HasKey("Id");

                    b.HasIndex("PaintId");

                    b.HasIndex("QualityId");

                    b.HasIndex("SheenId");

                    b.ToTable("product");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Quality", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("quality");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Sheen", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<bool>("IsGoodSheen")
                        .HasColumnType("bit")
                        .HasColumnName("is_good_sheen");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("sheen");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Skin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsWarPaint")
                        .HasColumnType("bit")
                        .HasColumnName("is_war_paint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<short?>("QualityId")
                        .HasColumnType("smallint")
                        .HasColumnName("quality_id");

                    b.HasKey("Id");

                    b.HasIndex("QualityId");

                    b.ToTable("skin");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Slot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("slot");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Item", b =>
                {
                    b.HasOne("SteamApp.Models.Entities.Class", "Class")
                        .WithMany("Items")
                        .HasForeignKey("ClassId");

                    b.HasOne("SteamApp.Models.Entities.Slot", "Slot")
                        .WithMany("Items")
                        .HasForeignKey("SlotId");

                    b.Navigation("Class");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.ItemSkins", b =>
                {
                    b.HasOne("SteamApp.Models.Entities.Grade", "Grade")
                        .WithMany("ItemSkins")
                        .HasForeignKey("GradeId");

                    b.HasOne("SteamApp.Models.Entities.Item", "ManualSearchItem")
                        .WithMany("ItemSkins")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamApp.Models.Entities.Skin", "Skin")
                        .WithMany("ItemSkins")
                        .HasForeignKey("SkinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("ManualSearchItem");

                    b.Navigation("Skin");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Product", b =>
                {
                    b.HasOne("SteamApp.Models.Entities.Paint", "Paint")
                        .WithMany("Products")
                        .HasForeignKey("PaintId");

                    b.HasOne("SteamApp.Models.Entities.Quality", "Quality")
                        .WithMany("Products")
                        .HasForeignKey("QualityId");

                    b.HasOne("SteamApp.Models.Entities.Sheen", "Sheen")
                        .WithMany("Products")
                        .HasForeignKey("SheenId");

                    b.Navigation("Paint");

                    b.Navigation("Quality");

                    b.Navigation("Sheen");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Skin", b =>
                {
                    b.HasOne("SteamApp.Models.Entities.Quality", "Quality")
                        .WithMany("Skins")
                        .HasForeignKey("QualityId");

                    b.Navigation("Quality");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Class", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Grade", b =>
                {
                    b.Navigation("ItemSkins");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Item", b =>
                {
                    b.Navigation("ItemSkins");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Paint", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Quality", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Skins");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Sheen", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Skin", b =>
                {
                    b.Navigation("ItemSkins");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Slot", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}

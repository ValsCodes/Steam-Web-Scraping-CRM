// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SteamApp.WebAPI.Context;

#nullable disable

namespace SteamApp.WebAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250810112023_db_rework_v9")]
    partial class db_rework_v9
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SteamApp.Models.Entities.AddOnType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<bool>("IsGood")
                        .HasColumnType("bit")
                        .HasColumnName("is_good");

                    b.Property<bool>("IsTeamFortressPaint")
                        .HasColumnType("bit")
                        .HasColumnName("is_team_fortress_paint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("AddOnTypes");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Class", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("GameId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("class");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Game", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("game");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.GameAddOn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<short>("AddOnTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("add_on_type_id");

                    b.Property<decimal?>("AddedValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("added_value");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("AddOnTypeId");

                    b.HasIndex("GameId");

                    b.ToTable("game_add_on");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.GameUrl", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("GameId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("game_url");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Grade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("GameId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("grade");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Invoice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<double>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_id");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("transcation_date");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("invoice");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("CurrentStock")
                        .HasColumnType("int")
                        .HasColumnName("current_stock");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_id");

                    b.Property<long>("GameUrlId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_url_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit")
                        .HasColumnName("is_favorite");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<short?>("Rating")
                        .HasColumnType("smallint")
                        .HasColumnName("rating");

                    b.Property<int?>("TradesCount")
                        .HasColumnType("int")
                        .HasColumnName("trades_count");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GameUrlId");

                    b.ToTable("item");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.ManyToMany.ItemClasses", b =>
                {
                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint")
                        .HasColumnName("class_id");

                    b.HasKey("ItemId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("item_classes");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.ManyToMany.ItemGameAddOns", b =>
                {
                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<long>("GameAddOnId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_add_on_id");

                    b.HasKey("ItemId", "GameAddOnId");

                    b.HasIndex("GameAddOnId");

                    b.ToTable("item_game_add_ons");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.ManyToMany.ItemQualities", b =>
                {
                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<short>("QualityId")
                        .HasColumnType("smallint")
                        .HasColumnName("quality_id");

                    b.HasKey("ItemId", "QualityId");

                    b.HasIndex("QualityId");

                    b.ToTable("item_qualities");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.ManyToMany.ItemSlots", b =>
                {
                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<long>("SlotId")
                        .HasColumnType("bigint")
                        .HasColumnName("slot_id");

                    b.HasKey("ItemId", "SlotId");

                    b.HasIndex("SlotId");

                    b.ToTable("item_slots");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.OneToOne.TeamFortressItem", b =>
                {
                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<long?>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsHat")
                        .HasColumnType("bit")
                        .HasColumnName("is_hat");

                    b.Property<bool>("IsWeapon")
                        .HasColumnType("bit")
                        .HasColumnName("is_weapon");

                    b.HasKey("ItemId");

                    b.HasIndex("ClassId");

                    b.ToTable("team_fortress_item");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.OneToOne.TeamFortressPaintAddOn", b =>
                {
                    b.Property<long>("GameAddOnId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_add_on_id");

                    b.Property<byte>("B")
                        .HasColumnType("tinyint")
                        .HasColumnName("b_value");

                    b.Property<byte>("G")
                        .HasColumnType("tinyint")
                        .HasColumnName("g_value");

                    b.Property<byte>("R")
                        .HasColumnType("tinyint")
                        .HasColumnName("r_value");

                    b.HasKey("GameAddOnId");

                    b.ToTable("TeamFortressPaintAddOns");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Quality", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<long>("GameId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_id");

                    b.Property<bool>("IsSkinQuality")
                        .HasColumnType("bit")
                        .HasColumnName("is_skin_quality");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("quality");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Skin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<short?>("QualityId")
                        .HasColumnType("smallint")
                        .HasColumnName("quality_id");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("QualityId");

                    b.ToTable("skin");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Slot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("slot");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Target", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("TargetPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("target_price");

                    b.Property<long>("WatchItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("watch_item_id");

                    b.HasKey("Id");

                    b.HasIndex("WatchItemId");

                    b.ToTable("target");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.WatchItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("item_id");

                    b.Property<DateTime>("LastCheckDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_check_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<short?>("QualityId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("QualityId");

                    b.ToTable("watch_item");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Class", b =>
                {
                    b.HasOne("SteamApp.Models.Entities.Game", "Game")
                        .WithMany("Classes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.GameAddOn", b =>
                {
                    b.HasOne("SteamApp.Models.Entities.AddOnType", "AddOnType")
                        .WithMany()
                        .HasForeignKey("AddOnTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamApp.Models.Entities.Game", "Game")
                        .WithMany("GameAddOns")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddOnType");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.GameUrl", b =>
                {
                    b.HasOne("SteamApp.Models.Entities.Game", "Game")
                        .WithMany("GameUrls")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Grade", b =>
                {
                    b.HasOne("SteamApp.Models.Entities.Game", "Game")
                        .WithMany("Grades")
                        .HasForeignKey("GameId");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Invoice", b =>
                {
                    b.HasOne("SteamApp.Models.Entities.Game", "Game")
                        .WithMany("Invoices")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Item", b =>
                {
                    b.HasOne("SteamApp.Models.Entities.Game", "Game")
                        .WithMany("Items")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamApp.Models.Entities.GameUrl", "GameUrl")
                        .WithMany("Items")
                        .HasForeignKey("GameUrlId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("GameUrl");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.ManyToMany.ItemClasses", b =>
                {
                    b.HasOne("SteamApp.Models.Entities.Class", "Class")
                        .WithMany("ItemClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SteamApp.Models.Entities.Item", "Item")
                        .WithMany("ItemClasses")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.ManyToMany.ItemGameAddOns", b =>
                {
                    b.HasOne("SteamApp.Models.Entities.GameAddOn", "GameAddOn")
                        .WithMany("ItemGameAddOns")
                        .HasForeignKey("GameAddOnId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SteamApp.Models.Entities.Item", "Item")
                        .WithMany("ItemGameAddOns")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameAddOn");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.ManyToMany.ItemQualities", b =>
                {
                    b.HasOne("SteamApp.Models.Entities.Item", "Item")
                        .WithMany("ItemQualities")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamApp.Models.Entities.Quality", "Quality")
                        .WithMany("ItemQualities")
                        .HasForeignKey("QualityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Quality");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.ManyToMany.ItemSlots", b =>
                {
                    b.HasOne("SteamApp.Models.Entities.Item", "Item")
                        .WithMany("ItemSlots")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamApp.Models.Entities.Slot", "Slot")
                        .WithMany("ItemSlots")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.OneToOne.TeamFortressItem", b =>
                {
                    b.HasOne("SteamApp.Models.Entities.Class", null)
                        .WithMany("TeamFotressItems")
                        .HasForeignKey("ClassId");

                    b.HasOne("SteamApp.Models.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.OneToOne.TeamFortressPaintAddOn", b =>
                {
                    b.HasOne("SteamApp.Models.Entities.GameAddOn", "GameAddOn")
                        .WithMany("TeamFortressPaintAddOns")
                        .HasForeignKey("GameAddOnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameAddOn");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Quality", b =>
                {
                    b.HasOne("SteamApp.Models.Entities.Game", "Game")
                        .WithMany("Qualities")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Skin", b =>
                {
                    b.HasOne("SteamApp.Models.Entities.Item", "Item")
                        .WithMany("Skins")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamApp.Models.Entities.Quality", "Quality")
                        .WithMany("Skins")
                        .HasForeignKey("QualityId");

                    b.Navigation("Item");

                    b.Navigation("Quality");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Target", b =>
                {
                    b.HasOne("SteamApp.Models.Entities.WatchItem", "WatchItem")
                        .WithMany("Targets")
                        .HasForeignKey("WatchItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WatchItem");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.WatchItem", b =>
                {
                    b.HasOne("SteamApp.Models.Entities.Item", "Item")
                        .WithMany("WatchItems")
                        .HasForeignKey("ItemId");

                    b.HasOne("SteamApp.Models.Entities.Quality", null)
                        .WithMany("Products")
                        .HasForeignKey("QualityId");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Class", b =>
                {
                    b.Navigation("ItemClasses");

                    b.Navigation("TeamFotressItems");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Game", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("GameAddOns");

                    b.Navigation("GameUrls");

                    b.Navigation("Grades");

                    b.Navigation("Invoices");

                    b.Navigation("Items");

                    b.Navigation("Qualities");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.GameAddOn", b =>
                {
                    b.Navigation("ItemGameAddOns");

                    b.Navigation("TeamFortressPaintAddOns");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.GameUrl", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Item", b =>
                {
                    b.Navigation("ItemClasses");

                    b.Navigation("ItemGameAddOns");

                    b.Navigation("ItemQualities");

                    b.Navigation("ItemSlots");

                    b.Navigation("Skins");

                    b.Navigation("WatchItems");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Quality", b =>
                {
                    b.Navigation("ItemQualities");

                    b.Navigation("Products");

                    b.Navigation("Skins");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.Slot", b =>
                {
                    b.Navigation("ItemSlots");
                });

            modelBuilder.Entity("SteamApp.Models.Entities.WatchItem", b =>
                {
                    b.Navigation("Targets");
                });
#pragma warning restore 612, 618
        }
    }
}
